package com.paymybuddy.backend.security;

import java.util.Base64;
import java.util.Date;

import javax.crypto.SecretKey;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.UnsupportedJwtException;
import io.jsonwebtoken.security.Keys;

@Component
public class JwtUtils {

	private final SecretKey secretKey;
	private final long jwtExpirationMS = 3600000;

	 public JwtUtils(@Value("${jwt.secret}") String secret) {
	        byte[] decodedKey = Base64.getDecoder().decode(secret);
	        this.secretKey = Keys.hmacShaKeyFor(decodedKey); // sécurisé
	    }

	

	public String generateJwtToken(String username) {
	
		return Jwts.builder()
				.setSubject(username)
				.setIssuedAt(new Date())
				.setExpiration(new Date(System.currentTimeMillis() + jwtExpirationMS))
				.signWith(secretKey, SignatureAlgorithm.HS256)
				.compact();
	}

	public String getUsernameFromJwtToken(String token) {
		  Claims claims = Jwts.parserBuilder()
	                .setSigningKey(secretKey)
	                .build()
	                .parseClaimsJws(token)
	                .getBody();

	        return claims.getSubject();
	    }

	public boolean validateJwtToken(String authToken) {
		  try {
	            Jwts.parserBuilder()
	                .setSigningKey(secretKey)
	                .build()
	                .parseClaimsJws(authToken);
	            return true;
	        } catch (SecurityException | MalformedJwtException e) {
	            System.err.println("Invalid JWT signature or token: " + e.getMessage());
	        } catch (ExpiredJwtException e) {
	            System.err.println("JWT token is expired: " + e.getMessage());
	        } catch (UnsupportedJwtException e) {
	            System.err.println("JWT token is unsupported: " + e.getMessage());
	        } catch (IllegalArgumentException e) {
	            System.err.println("JWT claims string is empty: " + e.getMessage());
	        }
	        return false;
	    }

}
