package com.paymybuddy.backend.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.paymybuddy.backend.dto.FriendDTO;
import com.paymybuddy.backend.model.User;
import com.paymybuddy.backend.repository.UserRepository;
import com.paymybuddy.backend.security.PasswordUtils;

import jakarta.transaction.Transactional;

@Service
public class UserService {

	private static final Logger logger = LoggerFactory.getLogger(UserService.class);

	private final UserRepository userRepository;


	public UserService(UserRepository userRepository, PasswordUtils passwordUtils) {
		this.userRepository = userRepository;
	}

	@Transactional
	public FriendDTO addFriends(int userId, String email) {
	    logger.info("Entrée dans addFriends avec l'email : {}", email);

	    User user = userRepository.findUserById(userId)
	            .orElseThrow(() -> new IllegalArgumentException("Utilisateur non trouvé"));

	    System.out.println("findById " + user.getEmail());

	    try {
	        if (user.getEmail().equalsIgnoreCase(email)) {
	            throw new IllegalArgumentException("Vous ne pouvez pas vous ajouter vous même");
	        }

	        
	        User friend = userRepository.findByEmailIgnoreCase(email)
	                .orElseThrow(() -> new IllegalArgumentException("Aucun utilisateur trouvé"));
	        System.out.println("findByEmail " + friend.getEmail());

	        if (user.getFriends().contains(friend)) {
	            throw new IllegalArgumentException("Cet utilisateur est déjà dans votre liste d'amis");
	        }

	        System.out.println("avant ajout friends " + user.getFriends().size());
	        user.getFriends().add(friend);
	        userRepository.save(user);

	        System.out.println("après save");
	        logger.info("Liste friendsOf de l'ami : {}", friend.getFriendsOf());
	    } catch (Exception e) {
	        e.printStackTrace();
	        throw e;
	    }

	    return new FriendDTO(email);
	}

}
