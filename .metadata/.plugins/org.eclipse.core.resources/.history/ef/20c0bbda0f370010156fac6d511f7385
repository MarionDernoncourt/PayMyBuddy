package com.paymybuddy.backend.service;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import com.paymybuddy.backend.model.User;
import com.paymybuddy.backend.repository.UserRepository;
import com.paymybuddy.backend.security.PasswordUtils;

import jakarta.transaction.Transactional;

@DataJpaTest
@Import({UserService.class, PasswordUtils.class}) // Import des beans n√©cessaires
public class UserServiceTest {
	   @Configuration
	    static class TestConfig {
	        @Bean
	        public BCryptPasswordEncoder passwordEncoder() {
	            return new BCryptPasswordEncoder();
	        }
	    }

    @Autowired
    private UserRepository userRepository;

    
    @Autowired
    private UserService userService;

    private User user;
    private User friend;

    @BeforeEach
    public void setup() {
        user = new User();
        user.setUsername("Alice");
        user.setEmail("alice@example.com");
        user.setPassword("password");

        friend = new User();
        friend.setUsername("Bob");
        friend.setEmail("bob@example.com");
        friend.setPassword("password");

        userRepository.save(user);
        userRepository.save(friend);
    }

    @Test
    @Transactional
    public void testAddFriendShouldPersistInJoinTable() {
        userService.addFriends(user.getId(), friend.getEmail());

        User updatedUser = userRepository.findUserById(user.getId()).orElseThrow();
        User updatedFriend = userRepository.findUserById(friend.getId()).orElseThrow();

        assertThat(updatedUser.getFriends()).contains(updatedFriend);
        assertThat(updatedFriend.getFriendsOf()).contains(updatedUser);
    }
}
