package com.paymybuddy.backend.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.paymybuddy.backend.dto.FriendDTO;
import com.paymybuddy.backend.model.User;
import com.paymybuddy.backend.repository.UserRepository;

@ExtendWith(MockitoExtension.class)
public class UserServiceTest {

	@Mock
	private UserRepository userRepository;
	
	@InjectMocks
	private UserService userService;

	

	@Test
	public void testAddFriend() {
		User user = new User() ;
		user.setId(1);
		user.setEmail("user@gmail.com");
		user.setFriends(new ArrayList<>());
		
		User friend = new User();
		friend.setId(2);
		friend.setEmail("friend@gmail.com");
		friend.setFriends(new ArrayList<>());
		
		when(userRepository.findById(1)).thenReturn(Optional.of(user));
		when(userRepository.findByEmailIgnoreCase("friend@gmail.com")).thenReturn(Optional.of(friend));
		when(userRepository.save(any(User.class))).thenAnswer(i -> i.getArgument(0));
		
		FriendDTO result = userService.addFriends(1,"friend@gmail.com");
		
		assertNotNull(result);
		assertEquals("friend@gmail.com", result.getEmail());
		assertTrue(user.getFriends().contains(friend));
		
		verify(userRepository).save(user);
		}
	
	@Test
	public void testAddFriend_UserNotFound() {
		
	}
}
