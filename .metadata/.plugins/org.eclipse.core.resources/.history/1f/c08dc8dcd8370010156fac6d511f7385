package com.paymybuddy.backend.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.paymybuddy.backend.dto.TransactionDTO;
import com.paymybuddy.backend.model.Transaction;
import com.paymybuddy.backend.model.User;
import com.paymybuddy.backend.repository.TransactionRepository;
import com.paymybuddy.backend.repository.UserRepository;

@ExtendWith(MockitoExtension.class)
public class TransactionServiceTest {
	
	@Mock
	private TransactionRepository transactionRepository;
	@Mock
	private UserRepository userRepository;
	@InjectMocks
	private TransactionService transactionService;
	
	private User sender;
	private User receiver;
	private Transaction transaction;
	
	@BeforeEach
	void setUp() {
	    sender = new User();
        sender.setId(1);
        sender.setUsername("username");
        sender.setEmail("sender@gmail.com");

        receiver = new User();
        receiver.setId(2);
        receiver.setUsername("receiver");
        receiver.setEmail("receiver@gmail.com");

        transaction = new Transaction();
        transaction.setDescription("Test transaction");
        transaction.setAmount(BigDecimal.valueOf(50.00));
        transaction.setSender(sender);
        transaction.setReceiver(receiver);
	}
	
	@Test
	public void testGetUserTransactions() {
		
		
		when(userRepository.findByUsernameIgnoreCase("sender")).thenReturn(Optional.of(sender));
		
		when(transactionRepository.findBySenderOrReceiver(any(User.class), any(User.class))).thenReturn(List.of(transaction));
		
		List<TransactionDTO> result = transactionService.getUserTransactions("username");
		
		assertNotNull(result);
		assertEquals(1, result.size());
		assertEquals("Test transaction", result.get(0).getDescription());
	}
	
	@Test
	public void testSendTransaction() {
		
	}

}
