import java.security.Key;
import java.util.Date;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

public class JwtUtils {

	private final JwtProperties jwtProperties;

	public JwtUtils(JwtProperties jwtProperties) {
		this.jwtProperties = jwtProperties;
	}

	private final long jwtExpirationMS = 3600000;

	public String generateJwtToken(String username) {
		String jwtSecret = jwtProperties.getSecret();

		byte[] keyBytes = Decoders.BASE64.decode(jwtSecret);
		Key key = Keys.hmacShaKeyFor(keyBytes);

		return Jwts.builder().setSubject(username).setIssuedAt(new Date())
				.setExpiration(new Date(System.currentTimeMillis() + jwtExpirationMS))
				.signWith(key, SignatureAlgorithm.HS256).compact();
	}

	public String getUsernameFromJwtToken(String token) {
		String jwtSecret = jwtProperties.getSecret();

		byte[] keyBytes = Decoders.BASE64.decode(jwtSecret);
		Key key = Keys.hmacShaKeyFor(keyBytes);

		Claims claims = Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token).getBody();

		return claims.getSubject();
	}

	public boolean validateJwtToken(String authToken) {
		try {
			String jwtSecret = jwtProperties.getSecret();

			byte[] keyBytes = Decoders.BASE64.decode(jwtSecret);
			Key key = Keys.hmacShaKeyFor(keyBytes);

			Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(authToken);

			return true;
		} catch (SecurityException | MalformedJwtException e) {
			System.err.println("Invalid JWT signature or token: " + e.getMessage());
		} catch (ExpiredJwtException e) {
			System.err.println("JWT token is expired: " + e.getMessage());
		} catch (UnsupportedJwtException e) {
			System.err.println("JWT token is unsupported: " + e.getMessage());
		} catch (IllegalArgumentException e) {
			System.err.println("JWT claims string is empty: " + e.getMessage());
		}
		return false;
	}

}
