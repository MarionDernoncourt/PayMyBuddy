package com.paymybuddy.backend.controller;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.paymybuddy.backend.dto.FriendDTO;
import com.paymybuddy.backend.security.TestSecurityConfig;

@SpringBootTest(classes = {com.paymybuddy.backend.PayMyBuddyApplication.class,TestSecurityConfig.class})
@ActiveProfiles("test")
@AutoConfigureMockMvc
public class UserControllerIT {

	@Autowired
	private MockMvc mockMvc;
	
	@MockBean
	private JwtDecoder jwtDecoder;
	
	private ObjectMapper objectMapper = new ObjectMapper()	;
	
	@Test
	public void addFriendTest() throws Exception {
		int userId = 1;
		FriendDTO friendDTO = new FriendDTO();
		friendDTO.setEmail("friend@gmail.com");
		
		mockMvc.perform(post("/api/users/" + userId + "/friends")
				.contentType(MediaType.APPLICATION_JSON)
				.content(objectMapper.writeValueAsString(friendDTO)))
.andExpect(status().isOk()).andExpect(jsonPath("$.email").value("friend@gmail.com"));
	}
}
