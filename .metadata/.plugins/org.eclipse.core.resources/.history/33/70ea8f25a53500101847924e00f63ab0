import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoder;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

import java.security.Key;
import java.util.Date;


public class JwtUtils {

		private final JwtProperties jwtProperties;
	

	public JwtUtils(JwtProperties jwtProperties) {
		this.jwtProperties = jwtProperties;
	}

	private final long jwtExpirationMS = 3600000;

	public String generateJwtToken(String username) {
		String jwtSecret = jwtProperties.getSecret()	;
		
		byte [] keyBtyes = Decoders.BASE64.decode(jwtSecret);
		Key key = Keys.hmacShaKeyFor(keyBtyes);

		return Jwts.builder()
				.setSubject(username)
				.setIssuedAt(new Date())
				.setExpiration(new Date(System.currentTimeMillis() + jwtExpirationMS))
				.signWith(key, SignatureAlgorithm.HS256)
				.compact();
	}

	public String getUsernameFromJwtToken(String token) {
		String jwtSecret = jwtProperties.getSecret()	;

		return Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(token).getBody().getSubject();
	}

	public boolean validateJwtToken(String authToken) {
		try {
			String jwtSecret = jwtProperties.getSecret()	;

			Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(authToken);
			return true;
		} catch (SignatureException e) {
			System.err.println("Invalid JWT signature : " + e.getMessage());
		} catch (MalformedJwtException e) {
			System.err.println("Invalid JWT token: " + e.getMessage());
		} catch (ExpiredJwtException e) {
			System.err.println("JWT token is expired: " + e.getMessage());
		} catch (UnsupportedJwtException e) {
			System.err.println("JWT token is unsupported: " + e.getMessage());
		} catch (IllegalArgumentException e) {
			System.err.println("JWT claims string is empty: " + e.getMessage());
		}
		return false;
	}

}
